Object subclass: #OObject	instanceVariableNames: 'type value nest attr ref'	classVariableNames: ''	poolDictionaries: ''	category: '_VM'!!OObject commentStamp: 'DPonyatov 7/10/2018 09:17' prior: 0!Object is a base class for oVM.	can hold single typed value or work as universal data containerit provides	- single value storage	- type runtime tracking 	- ordered nest[]ed elements storage	- key/value attr{}ibutesInstance Variables	type			class tag /string/	value			single value	nest[]ed		ordered vector	attr{}ibutes	= named object slots	ref				 reference counter for custom garbage collection!!OObject methodsFor: 'tutorial' stamp: 'DPonyatov 7/9/2018 10:03'!hello	"say hello"	^ 'hello'! !!OObject methodsFor: 'tutorial' stamp: 'DPonyatov 7/9/2018 10:03'!hello: what	"say hello"	^ 'hello, ' , what! !!OObject methodsFor: 'printing' stamp: 'DPonyatov 7/9/2018 17:10'!dump	" wrap dump for root node: depth=0 "	^ self dump: 0! !!OObject methodsFor: 'printing' stamp: 'DPonyatov 7/9/2018 17:10'!dump: depth" 	_recursive_ dump object in full tree format:		<type:value> # header		attr1 = ...			....	.		attr2 = ...		nest1		nest2		...."	| s |	s := ( self pad: depth ) , ( self head ).	^ s! !!OObject methodsFor: 'printing' stamp: 'DPonyatov 7/9/2018 17:07'!head	^ self head:''! !!OObject methodsFor: 'printing' stamp: 'DPonyatov 7/9/2018 17:02'!head: prefix	"return object header dump in the form <type:value>"	^ prefix , '<' , type , ':' , value , '>'! !!OObject methodsFor: 'printing' stamp: 'DPonyatov 7/9/2018 17:22'!pad: n	"left padding for tree form dump"	| s |	s := ''.	n timesRepeat: [ s := s , Character tab. ].	^ String cr , s.! !!OObject methodsFor: 'initialize-release' stamp: 'DPonyatov 7/10/2018 09:10'!initialize	^ self initialize: nil	! !!OObject methodsFor: 'initialize-release' stamp: 'DPonyatov 7/10/2018 09:07'!initialize: V"create symbolic object with given name / idits just a uniq symbol has no semanticssymbols evaluates- to itself in no entry in lookup tables found, or- value was found in lookup process"| pool |super initialize." type tag "type := 'object'." single value "value := V." next[]ed elements /ordered vector/ "nest := Array new." attr{}ibutes /associative array/ containes named object slots "attr := Dictionary new." reference counter for custom garbage collection "ref := 0." all known objects pool "pool := Array new.! !!OObject methodsFor: 'accessing' stamp: 'DPonyatov 7/9/2018 17:01'!attr	"Answer the value of attr"	^ attr! !!OObject methodsFor: 'accessing' stamp: 'DPonyatov 7/9/2018 17:01'!attr: anObject	"Set the value of attr"	attr := anObject! !!OObject methodsFor: 'accessing' stamp: 'DPonyatov 7/9/2018 17:01'!nest	"Answer the value of nest"	^ nest! !!OObject methodsFor: 'accessing' stamp: 'DPonyatov 7/9/2018 17:01'!nest: anObject	"Set the value of nest"	nest := anObject! !!OObject methodsFor: 'accessing' stamp: 'DPonyatov 7/9/2018 17:01'!ref	"Answer the value of ref"	^ ref! !!OObject methodsFor: 'accessing' stamp: 'DPonyatov 7/9/2018 17:01'!ref: anObject	"Set the value of ref"	ref := anObject! !!OObject methodsFor: 'accessing' stamp: 'DPonyatov 7/9/2018 17:01'!type	"Answer the value of type"	^ type! !!OObject methodsFor: 'accessing' stamp: 'DPonyatov 7/9/2018 17:01'!type: anObject	"Set the value of type"	type := anObject! !!OObject methodsFor: 'accessing' stamp: 'DPonyatov 7/9/2018 17:01'!value: anObject	"Set the value of value"	value := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OObject class	instanceVariableNames: 'pool'!OObject subclass: #OActive	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '_VM'!!OActive commentStamp: 'DPonyatov 7/10/2018 09:24' prior: 0!Active is any object has execution semantics (can be evaluated)!OObject subclass: #OContainer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '_VM'!!OContainer commentStamp: 'DPonyatov 7/10/2018 09:17' prior: 0!Container is a generic data container!OActive subclass: #OFunction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '_VM'!OContainer subclass: #OMap	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '_VM'!!OMap commentStamp: 'DPonyatov 7/10/2018 09:19' prior: 0!Map is an associative array = Dictionary!OActive subclass: #OOperator	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '_VM'!!OOperator commentStamp: 'DPonyatov 7/10/2018 11:49' prior: 0!Operator	is a tiny executable element can do one single computation!OObject subclass: #OPrimitive	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '_VM'!!OPrimitive commentStamp: 'DPonyatov 7/10/2018 09:17' prior: 0!Primitive is a parent for all primitive types:	- maps to types implementer at machine level or 	- low-level programming language model!OPrimitive subclass: #ONumber	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '_VM'!!ONumber commentStamp: 'DPonyatov 7/10/2018 09:22' prior: 0!Number is a floating point number!ONumber subclass: #OInteger	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '_VM'!!OInteger commentStamp: 'DPonyatov 7/10/2018 09:23' prior: 0!Integer is an integer number!OActive subclass: #OSheduler	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '_VM'!!OSheduler commentStamp: 'DPonyatov 7/10/2018 12:20' prior: 0!Sheduler is a task/resource sheduler!OContainer subclass: #OStack	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '_VM'!!OStack commentStamp: 'DPonyatov 7/10/2018 09:19' prior: 0!Stack is a LIFO container = Stack!OPrimitive subclass: #OString	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '_VM'!!OString commentStamp: 'DPonyatov 7/10/2018 09:22' prior: 0!String is a (UTF) string = String!OPrimitive subclass: #OSymbol	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '_VM'!!OSymbol commentStamp: 'DPonyatov 7/10/2018 09:17' prior: 0!Symbol class	uniq name or singleton object represents some entity	it evaluates to:		- object was found by lookup, or	- itself of lookup fails!!OSymbol methodsFor: 'initialize-release' stamp: 'DPonyatov 7/9/2018 14:58'!initialize: V	super initialize: V.	type := 'symbol'.! !OActive subclass: #OVM	instanceVariableNames: 'code ip stack sp fp'	classVariableNames: ''	poolDictionaries: ''	category: '_VM'!!OVM commentStamp: 'DPonyatov 7/10/2018 09:44' prior: 0!VM is a Virtual Machine:	- can run as separate isolated process	- can execute program stored inside	- has execution context represents VM internall stateVariables:	code	byte[code] or other program representation	ip		[I]nstruction [p]ointer to current execution position in a code	stack	[stack]	sp		[s]tack [p]ointer	frame	stack [frame] pointer				for classical shared stacks with 					function return address, 					function parameters, 					local variables					dynamic memory allocation on a stack					!OVM subclass: #OFVM	instanceVariableNames: 'return rp'	classVariableNames: ''	poolDictionaries: ''	category: '_VM'!!OFVM commentStamp: 'DPonyatov 7/10/2018 09:48' prior: 0!FVM is oFORTH Virtual Machine	has separate stacks for			stack	data [stack] shared thru the whole code execution		sp		data [s]tack [p]ointer						return	[return] stack for call/ret addresses only		rp		[r]eturn stack pointer							- locals, and 		- floating point coputations (is case of low-level non object VM)			*shared data stack* has an advantage		in implementing <concatenative programming language model>!OFVM subclass: #OEVM	instanceVariableNames: 'memory'	classVariableNames: ''	poolDictionaries: ''	category: '_VM'!!OEVM commentStamp: 'DPonyatov 7/10/2018 09:56' prior: 0!EVM is an Embedded Virtual Machine	Bytecode/stack VM specially optimized for use in tiny embedded hardware:		AVR8 and Cortex-M mictrocontrollers with 8+ R RAM			bytecode interpreter for this like stack machine has anvantages		- code compactness is well suitable for embedding into real tiny embedded systems		- execution isolation is easy to do parallel processing with flexible sheduling methods		- portability and easy adoptatoin for different hardware variants	Instance Variables	EVM is much more close to classical FORTH model		memory		shared memory image with bytecode, all data, vocabulary,...	ip				instirction pointer						stack			data stack	sp				data stack pointer!OContainer subclass: #OVector	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '_VM'!!OVector commentStamp: 'DPonyatov 7/10/2018 09:20' prior: 0!Vector is an ordered container = Array!